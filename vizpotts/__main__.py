import argparse
import pathlib

from makepotts.potts_object import *
from vizpotts.vizpotts import *
from makepotts.potts_model import *
from comutils import files_management as fm


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--potts_models', help="Potts model (msgpack files)", type=pathlib.Path, nargs='+', default=[])
    parser.add_argument('-f', '--feature_folders', help="Potts objects (folders generated by MakePotts)", type=pathlib.Path, nargs='+', default=[])
    parser.add_argument('-i', '--i_index', help="i index", type=int, default=None)
    parser.add_argument('-j', '--j_index', help="j index", type=int, default=None)
    parser.add_argument('-1', '--start_at_1', help="Start numbering at 1", action='store_true', default=True), 
    parser.add_argument('-0', '--start_at_0', help="Start numbering at 0", action='store_true', default=False), 
    parser.add_argument('-o', '--output_folder', help="PPalign output folder", type=pathlib.Path, default=None),
    parser.add_argument('-aln', '--visualize_alignment', help="Visualize aligned scores, requires PPalign output folder path (-o option)", action='store_true', default=False), 
    parser.add_argument('-v', '--v_only', help="Only plot vi parameters", action='store_true', default=False), 
    parser.add_argument('-vn', '--v_norms_only', help="Only plot vi norms", action='store_true', default=False), 
    parser.add_argument('-wn', '--w_norms_only', help="Only plot wij norms", action='store_true', default=False), 
    parser.add_argument('-alph', '--alphabetical', help="Use alphabetical amino acid order", action='store_true', default=False), 
    args = vars(parser.parse_args())

    if args["alphabetical"]:
        alphabet=ALPHABET
    else:
        alphabet="CSTPAGNDEQHRKMILVFYW-"


    start_at_1 = args["start_at_1"] and not args["start_at_0"]

    potts_models = [Potts_Model.from_msgpack(potts_model_file) for potts_model_file in args["potts_models"]]
    for feature_folder in args["feature_folders"]:
        potts_models.append(Potts_Object.from_folder(feature_folder).potts_model)

    if (args["i_index"] is not None) and (args["j_index"] is not None):
        for mrf in potts_models:
            i = args["i_index"]
            j = args["j_index"]
            if start_at_1:
                i-=1
                j-=1
            plot_one_wij(mrf.w[i][j], show_figure=False, alphabet=alphabet)
        plt.show()
    else:
        if args["visualize_alignment"]:
            if args["output_folder"] is None:
                raise Exception("Requires PPalign output folder path (-o option)")
            else:
                params = fm.get_parameters_from_readme_file(args["output_folder"]/"README.txt")
                potts_models = [get_rescaled_potts_model(pm, **params) for pm in potts_models]
                label_dict=fm.get_aligned_positions_dict_from_ppalign_output_file(args["output_folder"]/("aln_sequences.csv"))
                visualize_v_alignment(potts_models, args["output_folder"]/("aln.csv"), start_at_1=start_at_1, show_figure=False, alphabet=alphabet, label_dict=label_dict, **params)
                visualize_v_w_scores_alignment(potts_models, args["output_folder"]/("aln.csv"), start_at_1=start_at_1, show_figure=False, alphabet=alphabet, label_dict=label_dict, **params)
        else:
            for mrf in potts_models:
                if args["v_only"]:
                    visualize_v_parameters(mrf.v, start_at_1=start_at_1, show_figure=False, alphabet=alphabet)
                elif args["v_norms_only"]:
                    visualize_v_norms(mrf.get_v_norms(), start_at_1=start_at_1, show_figure=False)
                elif args["w_norms_only"]:
                    visualize_w_norms(mrf.get_w_norms(), start_at_1=start_at_1, show_figure=True)
                else:
                    visualize_mrf(mrf, start_at_1=start_at_1, show_figure=False, alphabet=alphabet)
        plt.show()



if __name__ == '__main__':
    main()
