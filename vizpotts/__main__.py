import argparse
import pathlib

from makepotts.potts_object import *
from vizpotts.vizpotts import *
from makepotts.potts_model import *


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--potts_models', help="Potts model (msgpack files)", type=pathlib.Path, nargs='+', default=[])
    parser.add_argument('-f', '--feature_folders', help="Potts objects (folders generated by MakePotts)", type=pathlib.Path, nargs='+', default=[])
    parser.add_argument('-i', '--i_index', help="i index", type=int, default=None)
    parser.add_argument('-j', '--j_index', help="j index", type=int, default=None)
    parser.add_argument('-1', '--start_at_1', help="Start numbering at 1", action='store_true', default=True), 
    parser.add_argument('-0', '--start_at_0', help="Start numbering at 0", action='store_true', default=False), 
    parser.add_argument('-aln', '--aln_compotts', help="ComPotts output file", type=pathlib.Path, default=None)
    parser.add_argument('-v', '--v_only', help="Only plot vi parameters", action='store_true', default=False), 
    parser.add_argument('-vn', '--v_norms_only', help="Only plot vi norms", action='store_true', default=False), 
    parser.add_argument('-wn', '--w_norms_only', help="Only plot wij norms", action='store_true', default=False), 
    parser.add_argument('-alph', '--alphabetical', help="Use alphabetical amino acid order", action='store_true', default=False), 
    args = vars(parser.parse_args())

    if args["alphabetical"]:
        alphabet=ALPHABET
    else:
        alphabet="CSTPAGNDEQHRKMILVFYW-"


    start_at_1 = args["start_at_1"] and not args["start_at_0"]

    for feature_folder in args["feature_folders"]:
        args["potts_models"].append(Potts_Object.from_folder(feature_folder).potts_model_file)

    if (args["i_index"] is not None) and (args["j_index"] is not None):
        for msgpack in args["potts_models"]:
            mrf = Potts_Model.from_msgpack(msgpack)
            i = args["i_index"]
            j = args["j_index"]
            if start_at_1:
                i-=1
                j-=1
            plot_one_wij(mrf.w[i][j], show_figure=False, alphabet=alphabet)
        plt.show()
    else:
        if args["aln_compotts"] is not None:
            visualize_v_alignment_from_files(args["potts_models"], args["aln_compotts"], start_at_1=start_at_1, show_figure=False, alphabet=alphabet)
            visualize_v_w_scores_alignment_from_files(args["potts_models"], args["aln_compotts"], start_at_1=start_at_1, show_figure=False, alphabet=alphabet)
        else:
            for msgpack in args["potts_models"]:
                mrf = Potts_Model.from_msgpack(msgpack)
                if args["v_only"]:
                    visualize_v_parameters(mrf.v, start_at_1=start_at_1, show_figure=False, alphabet=alphabet)
                elif args["v_norms_only"]:
                    visualize_v_norms(mrf.get_v_norms(), start_at_1=start_at_1, show_figure=False)
                elif args["w_norms_only"]:
                    visualize_w_norms(mrf.get_w_norms(), start_at_1=start_at_1, show_figure=True)
                else:
                    visualize_mrf(mrf, start_at_1=start_at_1, show_figure=False, alphabet=alphabet)
        plt.show()



if __name__ == '__main__':
    main()
